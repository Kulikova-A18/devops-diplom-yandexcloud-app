name: CI/CD

on:
  push:
    branches: [main]

env:
  REGISTRY: cr.yandex/crps1p5u048a00f4o97j
  IMAGE_NAME: testapp
  K8S_NAMESPACE: app
  DEPLOYMENT_NAME: testapp

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Login to Yandex CR
      run: |
        echo '${{ secrets.YC_SA_KEY }}' | docker login --username json_key --password-stdin cr.yandex

    - name: Build and push
      run: |
        TAG=${GITHUB_SHA::8}
        docker build -t $REGISTRY/$IMAGE_NAME:$TAG .
        docker push $REGISTRY/$IMAGE_NAME:$TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl
      env:
        K8S_CA_CERT: ${{ secrets.K8S_CA_CERT }}
        K8S_ENDPOINT: ${{ secrets.K8S_ENDPOINT }}
        K8S_TOKEN: ${{ secrets.K8S_TOKEN }}
      run: |
        # Создаем kubeconfig
        kubectl config set-cluster my-cluster \
          --server="$K8S_ENDPOINT" \
          --certificate-authority=<(echo "$K8S_CA_CERT")
        
        kubectl config set-credentials my-user \
          --token="$K8S_TOKEN"
        
        kubectl config set-context my-context \
          --cluster=my-cluster \
          --user=my-user \
          --namespace=$K8S_NAMESPACE
        
        kubectl config use-context my-context

    - name: Deploy to Kubernetes
      run: |
        # Обновляем образ в deployment
        kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$REGISTRY/$IMAGE_NAME:${GITHUB_SHA::8} -n $K8S_NAMESPACE
        
        # Ждем обновления
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $K8S_NAMESPACE --timeout=300s
        
        echo "✅ Deployment successful!"
        
        # Показываем статус
        kubectl get pods -n $K8S_NAMESPACE -l app=$DEPLOYMENT_NAME
