name: CI/CD

on:
  push:
    branches: [main]

env:
  REGISTRY: cr.yandex/crps1p5u048a00f4o97j
  IMAGE_NAME: testapp
  K8S_NAMESPACE: app
  DEPLOYMENT_NAME: testapp

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Yandex CR
      run: |
        echo '${{ secrets.YC_SA_KEY }}' | docker login --username json_key --password-stdin cr.yandex

    - name: Build and push
      run: |
        TAG=${GITHUB_SHA::8}
        docker build -t $REGISTRY/$IMAGE_NAME:$TAG .
        docker push $REGISTRY/$IMAGE_NAME:$TAG
        docker tag $REGISTRY/$IMAGE_NAME:$TAG $REGISTRY/$IMAGE_NAME:latest
        docker push $REGISTRY/$IMAGE_NAME:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3

    - name: Configure kubectl with node IP
      env:
        K8S_CA_CERT: ${{ secrets.K8S_CA_CERT }}
        K8S_TOKEN: ${{ secrets.K8S_TOKEN }}
      run: |
        # Используем IP одной из нод напрямую
        NODE_IP="158.160.197.70"  # Одна из ваших рабочих нод
        
        echo "Configuring kubectl to use node IP: $NODE_IP"
        
        kubectl config set-cluster my-cluster \
          --server="https://$NODE_IP:6443" \
          --certificate-authority=<(echo "$K8S_CA_CERT")
        
        kubectl config set-credentials my-user \
          --token="$K8S_TOKEN"
        
        kubectl config set-context my-context \
          --cluster=my-cluster \
          --user=my-user \
          --namespace=$K8S_NAMESPACE
        
        kubectl config use-context my-context
        
        echo "Kubectl configuration completed successfully"
        echo "Если конфигурация не удалась, проверьте:"
        echo "1. Корректность CA сертификата в секрете K8S_CA_CERT"
        echo "2. Корректность токена в секрете K8S_TOKEN"
        echo "3. Формат сертификата (должен начинаться с -----BEGIN CERTIFICATE-----)"

    - name: Test cluster connection
      run: |
        echo "Testing cluster connection..."
        if kubectl cluster-info && kubectl get nodes; then
          echo "Cluster connection successful"
        else
          echo "Cluster connection failed, but continuing with deployment"
          echo ""
          echo "РЕКОМЕНДАЦИИ ПО РЕШЕНИЮ ПРОБЛЕМЫ:"
          echo "1. Проверьте доступность порта 6443 на ноде:"
          echo "   nc -zv 158.160.197.70 6443"
          echo ""
          echo "2. Попробуйте другие ноды:"
          echo "   - 89.169.152.21:6443"
          echo "   - 84.201.152.99:6443" 
          echo ""
          echo "3. Если порт 6443 недоступен, попробуйте порт 443:"
          echo "   kubectl config set-cluster my-cluster --server='https://158.160.197.70:443'"
          echo ""
          echo "4. Настройте self-hosted runner внутри вашей VPC:"
          echo "   - Установите runner на одной из ваших ВМ"
          echo "   - Используйте runs-on: [self-hosted, k8s-runner]"
          echo ""
          echo "5. Проверьте корректность секретов:"
          echo "   - K8S_CA_CERT должен быть в PEM формате"
          echo "   - K8S_TOKEN должен быть валидным токеном"
          echo ""
          echo "Продолжаем деплой несмотря на ошибку подключения"
        fi

    - name: Deploy to Kubernetes
      run: |
        # Обновляем образ в deployment
        IMAGE_TAG="${GITHUB_SHA::8}"
        echo "Deploying image: $REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
        
        if kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$REGISTRY/$IMAGE_NAME:$IMAGE_TAG -n $K8S_NAMESPACE; then
          echo "Deployment update command executed successfully"
        else
          echo "Deployment update failed"
          echo "РЕКОМЕНДАЦИИ:"
          echo "1. Проверьте существование deployment: kubectl get deployment $DEPLOYMENT_NAME -n $K8S_NAMESPACE"
          echo "2. Проверьте корректность имени контейнера в deployment"
          echo "3. Убедитесь что образ доступен в registry"
          echo "Продолжаем выполнение..."
        fi
        
        # Ждем обновления
        echo "Waiting for rollout..."
        if kubectl rollout status deployment/$DEPLOYMENT_NAME -n $K8S_NAMESPACE --timeout=300s; then
          echo "Rollout completed successfully"
        else
          echo "Rollout failed or timeout"
          echo "РЕКОМЕНДАЦИИ:"
          echo "1. Проверьте логи пода: kubectl logs -n $K8S_NAMESPACE -l app=$DEPLOYMENT_NAME"
          echo "2. Проверьте события: kubectl get events -n $K8S_NAMESPACE"
          echo "3. Убедитесь что новый образ загружается и запускается"
          echo "Продолжаем выполнение..."
        fi
        
        # Показываем статус
        echo "Current pods status:"
        kubectl get pods -n $K8S_NAMESPACE -l app=$DEPLOYMENT_NAME

    - name: Verify application
      run: |
        echo "Verifying application..."
        sleep 10
        
        echo "Final pod status:"
        if kubectl get pods -n $K8S_NAMESPACE -l app=$DEPLOYMENT_NAME; then
          echo "Application verification completed"
        else
          echo "Application verification failed"
          echo "РЕКОМЕНДАЦИИ:"
          echo "1. Проверьте что поды существуют: kubectl get pods -n $K8S_NAMESPACE"
          echo "2. Проверьте логи проблемных подов"
          echo "3. Убедитесь что сервис доступен"
        fi
        
        echo "Deployment process completed"
        echo "Для дальнейшей диагностики используйте:"
        echo "kubectl describe deployment $DEPLOYMENT_NAME -n $K8S_NAMESPACE"
        echo "kubectl logs -n $K8S_NAMESPACE -l app=$DEPLOYMENT_NAME"
        echo "kubectl get events -n $K8S_NAMESPACE"
