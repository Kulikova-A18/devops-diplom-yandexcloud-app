name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ published ]

env:
  REGISTRY: cr.yandex/crps1p5u048a00f4o97j
  IMAGE_NAME: testapp
  K8S_NAMESPACE: app
  DEPLOYMENT_NAME: testapp

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t $REGISTRY/$IMAGE_NAME:${GITHUB_SHA::8} .
        docker build -t $REGISTRY/$IMAGE_NAME:latest .

    - name: Run tests
      run: |
        echo "Running tests..."
        if [ -f "index.html" ]; then
          echo "✓ index.html found"
        else
          echo "✗ index.html not found"
          exit 1
        fi

  push-to-registry:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Yandex Container Registry
      run: |
        echo '${{ secrets.YC_SA_KEY }}' > /tmp/key.json
        cat /tmp/key.json | docker login --username json_key --password-stdin cr.yandex

    - name: Build and push Docker image
      run: |
        if [ "${{ github.event_name }}" == "release" ]; then
          IMAGE_TAG="${{ github.event.release.tag_name }}"
        else
          IMAGE_TAG="${GITHUB_SHA::8}"
        fi
        
        echo "Building image: $REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
        
        docker build -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
        docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
        
        if [ "${{ github.event_name }}" == "push" ]; then
          docker tag $REGISTRY/$IMAGE_NAME:$IMAGE_TAG $REGISTRY/$IMAGE_NAME:latest
          docker push $REGISTRY/$IMAGE_NAME:latest
          echo "Pushed latest tag"
        fi

  deploy-to-k8s:
    needs: push-to-registry
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Create kubeconfig
      env:
        K8S_CA_CERT: ${{ secrets.K8S_CA_CERT }}
        K8S_ENDPOINT: ${{ secrets.K8S_ENDPOINT }}
        K8S_TOKEN: ${{ secrets.K8S_TOKEN }}
      run: |
        # Убедимся, что CA cert правильно закодирован
        CA_CERT_BASE64=$(echo "$K8S_CA_CERT" | base64 -w 0)
        
        cat > kubeconfig.yaml << EOF
        apiVersion: v1
        kind: Config
        clusters:
        - name: cluster
          cluster:
            certificate-authority-data: $CA_CERT_BASE64
            server: $K8S_ENDPOINT
        contexts:
        - name: context
          context:
            cluster: cluster
            user: user
            namespace: $K8S_NAMESPACE
        current-context: context
        users:
        - name: user
          user:
            token: $K8S_TOKEN
        EOF
        
        echo "Kubeconfig created successfully"
        echo "CA cert length: ${#K8S_CA_CERT}"
        echo "Base64 CA cert length: ${#CA_CERT_BASE64}"
        
        # Проверим синтаксис kubeconfig
        kubectl --kubeconfig=kubeconfig.yaml config view

    - name: Test cluster connection
      run: |
        export KUBECONFIG=kubeconfig.yaml
        echo "Testing cluster connection..."
        kubectl cluster-info
        kubectl get nodes

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig.yaml
        
        if [ "${{ github.event_name }}" == "release" ]; then
          TAG="${{ github.event.release.tag_name }}"
        else
          TAG="${GITHUB_SHA::8}"
        fi
        
        IMAGE_URL="$REGISTRY/$IMAGE_NAME:$TAG"
        echo "Deploying image: $IMAGE_URL"
        
        kubectl set image deployment/$DEPLOYMENT_NAME $DEPLOYMENT_NAME=$IMAGE_URL -n $K8S_NAMESPACE
        
        echo "Waiting for rollout..."
        kubectl rollout status deployment/$DEPLOYMENT_NAME -n $K8S_NAMESPACE --timeout=300s
        
        echo "Deployment status:"
        kubectl get deployment/$DEPLOYMENT_NAME -n $K8S_NAMESPACE -o wide

    - name: Verify application
      run: |
        export KUBECONFIG=kubeconfig.yaml
        echo "Verifying deployment..."
        echo "Pods status:"
        kubectl get pods -n $K8S_NAMESPACE -l app=$DEPLOYMENT_NAME
        echo "Services status:"
        kubectl get svc -n $K8S_NAMESPACE

  notify:
    needs: [build-and-test, push-to-registry, deploy-to-k8s]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-and-test.result == 'success' && needs.push-to-registry.result == 'success' && needs.deploy-to-k8s.result == 'success'
      run: |
        echo "🎉 CI/CD Pipeline completed successfully!"
        echo "Image: $REGISTRY/$IMAGE_NAME:${GITHUB_SHA::8}"
        echo "Deployed to namespace: $K8S_NAMESPACE"

    - name: Notify failure
      if: needs.build-and-test.result == 'failure' || needs.push-to-registry.result == 'failure' || needs.deploy-to-k8s.result == 'failure'
      run: |
        echo "❌ CI/CD Pipeline failed"
        exit 1
